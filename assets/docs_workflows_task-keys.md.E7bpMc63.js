import{_ as e,c as t,o as a,a4 as o}from"./chunks/framework.ttppV29E.js";const f=JSON.parse('{"title":"Task Keys","description":"","frontmatter":{},"headers":[],"relativePath":"docs/workflows/task-keys.md","filePath":"docs/workflows/task-keys.md","lastUpdated":1758110808000}'),s={name:"docs/workflows/task-keys.md"},i=o('<h1 id="task-keys" tabindex="-1">Task Keys <a class="header-anchor" href="#task-keys" aria-label="Permalink to &quot;Task Keys&quot;">​</a></h1><h2 id="about" tabindex="-1">About <a class="header-anchor" href="#about" aria-label="Permalink to &quot;About&quot;">​</a></h2><p>A task key is an identifier for the task which is unique across all workflow definitions. Once you have saved your task with your key you will not be able to edit this key again.</p><h2 id="formatting-rules" tabindex="-1">Formatting Rules <a class="header-anchor" href="#formatting-rules" aria-label="Permalink to &quot;Formatting Rules&quot;">​</a></h2><p>There are a number of formatting rules which are set out which you must follow. They are as follows:</p><ul><li>Only contains lowercase letters, numbers and dashes, e.g. <code>key-123</code>.</li><li>Starts with a letter e.g. <code>123-key</code> will not be valid but <code>key-123</code> will be.</li></ul><h2 id="duplicate-key-rules" tabindex="-1">Duplicate Key Rules <a class="header-anchor" href="#duplicate-key-rules" aria-label="Permalink to &quot;Duplicate Key Rules&quot;">​</a></h2><p>As mentioned above, the key is unique across all workflow definitions. An example of this is as follows:</p><p>Let&#39;s say we want to create a workflow definition with 2 tasks. We assign a key of <code>task-key-1</code> to the first task and <code>task-key-2</code> to the second task. This would be valid. If we then wanted to create a third task for this workflow definition but also assign <code>task-key-1</code> as the key to this third task then we would get an error as this key has already been used.</p><p>Taking this example, if we instead wanted to create another new workflow definition with only one task with a key of <code>task-key-1</code> we would also see an error. Even though this key would be unique for this particular workflow definition, it has already been used in another separate workflow definition.</p><p>Finally, the only time where you will see the key used more than once for a workflow definition is when you have multiple versions. If you take the first example again where we have two tasks, one with the key <code>task-key-1</code> and one with the key <code>task-key-2</code>, and then create a new version of this workflow, we would not see an error. Version one of the workflow definition will have two tasks, both with the same keys as the two tasks in version two.</p>',11),n=[i];function r(l,d,h,k,w,c){return a(),t("div",null,n)}const y=e(s,[["render",r]]);export{f as __pageData,y as default};
