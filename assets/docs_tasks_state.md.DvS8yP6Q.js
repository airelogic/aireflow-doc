import{_ as a,c as s,o as t,a4 as i}from"./chunks/framework.ttppV29E.js";const E=JSON.parse('{"title":"Task State","description":"","frontmatter":{},"headers":[],"relativePath":"docs/tasks/state.md","filePath":"docs/tasks/state.md","lastUpdated":1758704551000}'),e={name:"docs/tasks/state.md"},n=i(`<h1 id="task-state" tabindex="-1">Task State <a class="header-anchor" href="#task-state" aria-label="Permalink to &quot;Task State&quot;">​</a></h1><p>Task State is a collection of Key-Value pairs stored against a task. Initial values can be set in a task definition, then values can be updated for a specific task instance using <a href="./../workflows/mutations.html">mutations</a> or via the <a href="./updating-tasks.html">JSON Patch API</a>.</p><h2 id="updating-state-with-a-mutation" tabindex="-1">Updating State with a Mutation <a class="header-anchor" href="#updating-state-with-a-mutation" aria-label="Permalink to &quot;Updating State with a Mutation&quot;">​</a></h2><p>If you wanted to update a state property called <code>your-state-property</code> for a task, you could use a mutation like this:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   &quot;op&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;add&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/state/your-state-proprty&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ updateContext.your-new-value }}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]</span></span></code></pre></div><p>This would rely on the context of the event that triggers your mutation looking something like this:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">xml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">your-new-value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;example value&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">your-new-value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">xml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>For more information about mutations, <a href="./../workflows/mutations.html">see this page</a></p>`,8),l=[n];function h(o,p,k,r,d,u){return t(),s("div",null,l)}const g=a(e,[["render",h]]);export{E as __pageData,g as default};
