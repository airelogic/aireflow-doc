import{_ as e,c as t,o,a4 as i}from"./chunks/framework.ttppV29E.js";const y=JSON.parse('{"title":"Importing from a Git Repository","description":"","frontmatter":{},"headers":[],"relativePath":"docs/workflows/git-import.md","filePath":"docs/workflows/git-import.md","lastUpdated":1751641097000}'),r={name:"docs/workflows/git-import.md"},n=i('<h1 id="importing-from-a-git-repository" tabindex="-1">Importing from a Git Repository <a class="header-anchor" href="#importing-from-a-git-repository" aria-label="Permalink to &quot;Importing from a Git Repository&quot;">​</a></h1><p>It&#39;s possible to import workflow defintions and/or event definition groups into AireFlow from a Git repository by opening the AireFlow menu and selecting &quot;Repositories&quot;.</p><h2 id="importing" tabindex="-1">Importing <a class="header-anchor" href="#importing" aria-label="Permalink to &quot;Importing&quot;">​</a></h2><p>To import workflow defintions and/or event definition groups from a Git repository, click the &quot;+&quot; button in the top right of the &quot;Repositories&quot; page. Enter the following details:</p><ul><li>Repository URL of the user</li><li>Branch to import from</li><li>Email address to send error if any during the import</li><li>Authentication details - Public/ SSH Key or Credentials and supporting details</li></ul><p>Then select &quot;Save&quot; to initiate the import. AireFlow will validate the details and the contents of the definitions from the repository and perform the import process accordingly.</p><h3 id="authentication-details-ssh-key" tabindex="-1">Authentication details - SSH Key <a class="header-anchor" href="#authentication-details-ssh-key" aria-label="Permalink to &quot;Authentication details - SSH Key&quot;">​</a></h3><p>When setting the <code>Authentication Type</code> to SSH Key you will be presented with a <code>Vault Secret Key</code> text field. This field relates to a secret you must have already configured in AireVault. For example, you may have a secret in AireVault with the key <code>AireFlowSshKey</code> with the value of your SSH Key stored against it. In this case you would enter <code>AireFlowSshKey</code> into the <code>Vault Secret Key</code> field. When saving the repository, as part of the validation process, AireFlow will try and retrieve the correct secret value from AireVault using the following scope <code>flow:repoName:repoBranch</code>. Therefore, you will need to ensure that you have a value for the <code>Vault Secret Key</code> for this corresponding scope.</p><h3 id="authentication-details-credentials" tabindex="-1">Authentication details - Credentials <a class="header-anchor" href="#authentication-details-credentials" aria-label="Permalink to &quot;Authentication details - Credentials&quot;">​</a></h3><p>When setting the <code>Authentication Type</code> to Credentials you will be presented with a <code>Username</code> text field as well as a <code>Vault Secret Key</code> text field. The <code>Username</code> field requires you to just enter the username required to gain access to the Git repository. On the other hand the <code>Vault Secret Key</code> relates to a secret you must have already configured in AireVault. For example, you may have a secret in AireVault with the key <code>AireFlowCredentialsPassword</code> with the value of your credentials password stored against it. In this case you would enter <code>AireFlowCredentialsPassword</code> into the <code>Vault Secret Key</code> field. When saving the repository, as part of the validation process, AireFlow will try and retrieve the correct secret value from AireVault using the following scope <code>flow:repoName:repoBranch</code>. Therefore, you will need to ensure that you have a value for the <code>Vault Secret Key</code> for this corresponding scope.</p><h2 id="validations" tabindex="-1">Validations <a class="header-anchor" href="#validations" aria-label="Permalink to &quot;Validations&quot;">​</a></h2><p>AireFlow will perform the following validations to ensure that there are no conflicts between the existing definitions in the system and the ones that get imported.</p><h3 id="workflow-definitions" tabindex="-1">Workflow Definitions <a class="header-anchor" href="#workflow-definitions" aria-label="Permalink to &quot;Workflow Definitions&quot;">​</a></h3><ul><li>Uniqueness of task keys - The task keys present in an imported workflow definitions should be unique and not match with any existing workflow definitions in the system. The task keys should also be unique within the imported workflow definitions.</li><li>Valid access to the repository for the logged on user - The specified repository URL should be accessible with the given credentials or SSH Key accordingly to the Authentication type. When the Authentication type is Public, the repository should be accessible without the need for any credentials or SSH key.</li></ul><h3 id="event-definition-groups" tabindex="-1">Event Definition Groups <a class="header-anchor" href="#event-definition-groups" aria-label="Permalink to &quot;Event Definition Groups&quot;">​</a></h3><ul><li>Uniqueness of event definition group names - The names present in the imported event definition groups should be unique and not match with any existing event definition group names in the system. The names should also be unique within the imported event definition groups.</li><li>Uniqueness of event definition group key - The group keys present in the imported event definition groups should be unique and not match with any existing event definition group keys in the system. The group keys should also be unique within the imported event definition groups.</li><li>Valid access to the repository for the logged on user - The specified repository URL should be accessible with the given credentials or SSH Key accordingly to the Authentication type. When the Authentication type is Public, the repository should be accessible without the need for any credentials or SSH key.</li></ul><h2 id="required-git-folder-and-file-structure" tabindex="-1">Required Git Folder and File Structure <a class="header-anchor" href="#required-git-folder-and-file-structure" aria-label="Permalink to &quot;Required Git Folder and File Structure&quot;">​</a></h2><p>In order for the import to be successful you need at least one of the following folders to be present:</p><ul><li><code>WorkflowDefinitions</code></li><li><code>EventDefinitionGroups</code></li></ul><p>The folder names must be spelt exactly like this. Then within these folders you must only include <code>.json</code> files. An example of how these should be formatted can be seen when you click export on either the Workflow Definition or Event Definition Group pages.</p>',20),a=[n];function s(l,d,h,c,u,p){return o(),t("div",null,a)}const m=e(r,[["render",s]]);export{y as __pageData,m as default};
