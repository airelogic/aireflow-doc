import{_ as e,c as a,o as i,a4 as s}from"./chunks/framework.ttppV29E.js";const f=JSON.parse('{"title":"AireVault Mapping","description":"","frontmatter":{},"headers":[],"relativePath":"docs/workflows/mapping-airevault.md","filePath":"docs/workflows/mapping-airevault.md","lastUpdated":1748522454000}'),t={name:"docs/workflows/mapping-airevault.md"},o=s(`<h1 id="airevault-mapping" tabindex="-1">AireVault Mapping <a class="header-anchor" href="#airevault-mapping" aria-label="Permalink to &quot;AireVault Mapping&quot;">​</a></h1><h2 id="mapping-airevault-variables-secrets" tabindex="-1">Mapping AireVault Variables &amp; Secrets <a class="header-anchor" href="#mapping-airevault-variables-secrets" aria-label="Permalink to &quot;Mapping AireVault Variables &amp; Secrets&quot;">​</a></h2><p>Using the AireVault API you can create variables and secrets that can be used within AireFlow&#39;s workflow definition. Each of these have a key and a number of scoped values that can be specified.</p><p>Similar to using liquid to map data within the context, AireVault variables and secrets are mapped in the same way.</p><p>Below would be an example request to AireVault to create a new vault variable to store an error email address:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;erroremail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;values&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;scope&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flow:workflowDefinitionKey:workflowDefinitionVersion&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev.aireflowerror@airelogic.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><em>The workflowDefinitionKey and workflowDefinitionVersion segment of the scope would be replaced with the related values.</em></p><h2 id="mapping" tabindex="-1">Mapping <a class="header-anchor" href="#mapping" aria-label="Permalink to &quot;Mapping&quot;">​</a></h2><p>Within the workflow definition you can access the vault variables with the following expression <code>{{ vault.variables.erroremail }}</code></p><p>Similarly if it was a vault secret you wanted to access you could do <code>{{ vault.secrets.erroremail }}</code></p><h2 id="scopes" tabindex="-1">Scopes <a class="header-anchor" href="#scopes" aria-label="Permalink to &quot;Scopes&quot;">​</a></h2><p>Depending on what scopes you have stored against the key, it will return different values. For workflow mapping, AireFlow requests use the scope of <code>flow:workflowDefinitionKey:workflowDefinitionVersion</code>, so this would return <a href="mailto:dev.aireflowerror@airelogic.com" target="_blank" rel="noreferrer">dev.aireflowerror@airelogic.com</a>.</p><p>However if you wanted a value to match only on the <code>workflowDefinitionKey</code> for all versions you could remove the last segment of the scope when creating the variable/secret e.g. <code>flow:workflowDefinitionKey</code></p><p>If you were to have the scope as <code>flow</code>, it would now match for all the AireFlow calls across all workflow definitions.</p>`,14),n=[o];function l(r,p,h,c,d,u){return i(),a("div",null,n)}const w=e(t,[["render",l]]);export{f as __pageData,w as default};
