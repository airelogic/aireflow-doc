import{_ as e,c as o,o as t,a4 as a}from"./chunks/framework.ttppV29E.js";const m=JSON.parse('{"title":"Defining the scope of workflows","description":"","frontmatter":{},"headers":[],"relativePath":"docs/advanced-topics/workflow-scope.md","filePath":"docs/advanced-topics/workflow-scope.md","lastUpdated":1758110808000}'),i={name:"docs/advanced-topics/workflow-scope.md"},s=a('<h1 id="defining-the-scope-of-workflows" tabindex="-1">Defining the scope of workflows <a class="header-anchor" href="#defining-the-scope-of-workflows" aria-label="Permalink to &quot;Defining the scope of workflows&quot;">​</a></h1><p>Deciding on where to define the boundary of a workflow is more <em>art than science</em> however there is some outline guidance below that should aide your thinking, reduce the maintenance overhead and also provide consistency across the team/organisation.</p><p>Before diving into the details, it is worth understanding that AireFlow is a <em>Choreographed Workflow</em> engine. This is distinct from an <em>Orchestrated Workflow</em> engine in that it functions based on input cues or events (like dancers waiting to do their move based on the cues from other dancers). In this way it is very easy to create <em>parasitic</em> child workflows that are triggered by events on another (main) workflow without needing to alter the original workflow, and without the other main workflow being aware of the <em>parasictic</em> child workflow.</p><p>As an example - consider a workflow that supports a <code>hospital-admimission</code> process. A step in that process might be the completion of a general patient assessment form. Consider a scenario where the assement form identifies that the elderly patient being admitted has had a fall within the last 6 months - and therefore (from a clinical perspective) needs a comprehensive falls assessment.</p><p>Here we could either:</p><ol><li>Extend the <code>hospital-admimission</code> workflow to also contain the full falls assessment steps too.</li><li>Define a seperate <code>falls-assessment</code> workflow that is triggered by the form submission event associated with the <code>hospital-admimission</code> workflow (provided the data indicates that an elderly patient had a fall within the last 6 months).</li></ol><p>In general we would favour option 2 above as:</p><ul><li>The core <code>hospital-admission</code> workflow remains stable (avoiding the need to <a href="/docs/workflows/versioning.html">up-version</a>), and an organisation can choose to digitise <em>downstream</em> activities or processes iteratively over time.</li><li>The <code>falls-assessment</code> workflow becomes reusable and can also be triggered in different contexts - for instance it could also be triggered if the patient was not deemed to be at risk of falls at the time of admission, but has a fall on the ward as an inpatient.</li><li>The <code>hospital-admission</code> workflow can operate without knowing or needing anything from the <code>falls-assessment</code> workflow and visa versa (other than the trigger event).</li><li>The <code>hospital-admission</code> and <code>falls-assessment</code> workflows can evolve independently of each other.</li></ul><h2 id="rules-of-thumb-to-define-the-workflow-scope" tabindex="-1">Rules of thumb to define the workflow scope <a class="header-anchor" href="#rules-of-thumb-to-define-the-workflow-scope" aria-label="Permalink to &quot;Rules of thumb to define the workflow scope&quot;">​</a></h2><h3 id="when-to-consider-a-single-workflow" tabindex="-1">When to consider a single workflow <a class="header-anchor" href="#when-to-consider-a-single-workflow" aria-label="Permalink to &quot;When to consider a single workflow&quot;">​</a></h3><p>If it is logically part of a one business process with tight coupling we would be inclined to have it as a single AireFlow workflow. i.e.</p><ul><li>We think of it as one end to end process (for instance imagine how people would whiteboard the process in a workshop).</li><li>It is generally the same group of triggers and human actors involved.</li><li>We likely want to create some visualisations across the whole flow.</li><li>If we are making any amends or updates we are likely to want to consider the whole.</li></ul><h3 id="when-to-consider-a-seperate-workflow" tabindex="-1">When to consider a seperate workflow <a class="header-anchor" href="#when-to-consider-a-seperate-workflow" aria-label="Permalink to &quot;When to consider a seperate workflow&quot;">​</a></h3><p>We would consider creating a seperate workflow when:</p><ul><li>The second workflow is <em>parasitic</em> on the first, and other than triggers does not have any tight coupling or dependency on the main workflow (and visa versa).</li><li>It is likely to be reused and triggered across multiple contexts.</li><li>It is likely to evolve independently of the <em>parent</em> workflow.</li></ul>',15),n=[s];function r(l,d,h,c,w,f){return t(),o("div",null,n)}const u=e(i,[["render",r]]);export{m as __pageData,u as default};
