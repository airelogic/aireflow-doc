import{_ as e,c as t,o as a,a4 as o}from"./chunks/framework.ttppV29E.js";const p=JSON.parse('{"title":"Task Types","description":"","frontmatter":{},"headers":[],"relativePath":"docs/workflows/task-types.md","filePath":"docs/workflows/task-types.md","lastUpdated":1754487952000}'),s={name:"docs/workflows/task-types.md"},i=o('<h1 id="task-types" tabindex="-1">Task Types <a class="header-anchor" href="#task-types" aria-label="Permalink to &quot;Task Types&quot;">​</a></h1><h2 id="manual" tabindex="-1">Manual <a class="header-anchor" href="#manual" aria-label="Permalink to &quot;Manual&quot;">​</a></h2><p>A manual task is used for when someone needs to perform an action e.g. make an observation.</p><h2 id="email" tabindex="-1">Email <a class="header-anchor" href="#email" aria-label="Permalink to &quot;Email&quot;">​</a></h2><p>An email task sends an email when it is created. While intended to inform the user that there is a task they need to complete, it can also be used to send receipt of a submission, a summary reply, or any other email. For example, a manager might receive an email notifying them of a ticket that has been raised, while the customer might receive a notification that their issue has been assigned to a manager to look into.</p><h2 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h2><p>An HTTP task makes a <code>POST</code> request to the url set in the <code>Url</code> field. The <code>Body</code> of this request can be formed to include data and match any required shape for the receipient endpoint. The request&#39;s <code>Content Type</code> will default to <code>text/plain</code>, however you can override this using the <code>Content Type</code> field. There is an option to include multiple headers in your request using the <code>Headers</code> section using key-value pairs. One thing to note is that if you were to add a Content-Type header in this <code>Headers</code> section it will override any value set in the explicit <code>Content Type</code> field. All of these fields can make use of both <a href="./mapping.html">XPath and Liquid</a> apart from the <code>Key</code> field of any <code>Headers</code>. Finally, you have the option to set <code>Retry on Failure</code> to either <code>Yes</code> or <code>No</code>. If the request fails for whatever reason and this value is set to <code>Yes</code> then the request will be sent again a number of times before eventually setting the event status to <code>Failed</code>.</p><h2 id="aireframe-create-form-deprecated-please-use-the-form-task-type-instead" tabindex="-1">AireFrame - Create Form (DEPRECATED - Please use the Form task type instead) <a class="header-anchor" href="#aireframe-create-form-deprecated-please-use-the-form-task-type-instead" aria-label="Permalink to &quot;AireFrame - Create Form (DEPRECATED - Please use the Form task type instead)&quot;">​</a></h2><p>If the AireFrame integration has been enabled, you will have the option to create an <code>AireFrame - Create Form</code> task. You must configure this task to include the key of the form you want to create as well as adding an optional form version, if no version is set then it will default to the latest. When this task is triggered a request will be made to AireFrame with the intention of creating a form matching your supplied form key and version. Both of these fields can make use of <a href="./mapping.html">XPath and Liquid</a>. Finally, you have the option to set <code>Retry on Failure</code> to either <code>Yes</code> or <code>No</code>. If the request fails for whatever reason and this value is set to <code>Yes</code> then the request will be sent again a number of times before eventually setting the event status to <code>Failed</code>.</p><h2 id="publish-event" tabindex="-1">Publish Event <a class="header-anchor" href="#publish-event" aria-label="Permalink to &quot;Publish Event&quot;">​</a></h2><p>The <code>Publish Event</code> task type allows you to publish an event which can be used to trigger and update other tasks. For this task type you must select a single event that you want to publish. You also have the option to set <code>Retry on Failure</code> to either <code>Yes</code> or <code>No</code>. If the request fails for whatever reason and this value is set to <code>Yes</code> then the request will be sent again a number of times before eventually setting the event status to <code>Failed</code>.</p><h2 id="form" tabindex="-1">Form <a class="header-anchor" href="#form" aria-label="Permalink to &quot;Form&quot;">​</a></h2><p>The <code>Form</code> task type has some unique funcitonality and is closely linked to the Form Instance API. For this task you must supply a form key and you can optionally add the form version. If this version is left empty then the latest form version will be used. You can also specify the instance ID of an existing form in the workflow definition, to link a form task to an exsiting form. If a form task is created with an instance ID already set, it will skip the &#39;New&quot; status and be created as <code>In Progress</code>.</p><p>When this task moves from <code>New</code> to <code>In Progress</code> a call will be made to create a new form instance using the form key and version supplied. If the form is successfully created, the <code>Form Instance Id</code> will be added to the task, otherwise the status will remain as <code>New</code>. The <code>instanceId</code> can be pulled back using GraphQL for the form task type. If you have the <code>Owner</code> and <code>OwnerType</code> properties set for this task then these will be used during the form creation as the <code>OnBehalfOf</code> user. Once the task is <code>In Progress</code>, it can either move to <code>Completed</code> or it can also be <code>Cancelled</code>.</p><p>If the task is <code>Cancelled</code> then a call will be made to withdraw the form instance. Again, if this withdraw call fails then the status will remain as <code>In Progress</code>. You are also able to set the Form task as <code>Cancelled</code> when in a <code>New</code> state if you no longer require the task, this will prevent users from being able to create a form instance under this task.</p><h3 id="complete-task-on-form-submission" tabindex="-1">Complete Task on Form Submission <a class="header-anchor" href="#complete-task-on-form-submission" aria-label="Permalink to &quot;Complete Task on Form Submission&quot;">​</a></h3><p>Use this setting on a form task definition to make the task status automatically change to complete when the linked form is submitted. The subject ID, correlation ID and form instance ID must match the submitted form for this to work.</p><h3 id="cancel-task-on-form-withdrawal" tabindex="-1">Cancel Task on Form Withdrawal <a class="header-anchor" href="#cancel-task-on-form-withdrawal" aria-label="Permalink to &quot;Cancel Task on Form Withdrawal&quot;">​</a></h3><p>Similar to the auto complete setting, use this setting to make the task status automatically change to cancelled when the linked form is withdrawn. The subject ID, correlation ID and form instance ID must match the withdrawn form for this to work.</p>',19),n=[i];function r(d,l,h,c,m,u){return a(),t("div",null,n)}const k=e(s,[["render",r]]);export{p as __pageData,k as default};
