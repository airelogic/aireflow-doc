import{_ as e,c as t,o as a,a4 as i}from"./chunks/framework.ttppV29E.js";const m=JSON.parse('{"title":"Triggers & Events","description":"","frontmatter":{},"headers":[],"relativePath":"docs/events/index.md","filePath":"docs/events/index.md","lastUpdated":1754487952000}'),s={name:"docs/events/index.md"},n=i('<h1 id="triggers-events" tabindex="-1">Triggers &amp; Events <a class="header-anchor" href="#triggers-events" aria-label="Permalink to &quot;Triggers &amp; Events&quot;">​</a></h1><p>A trigger is what defines when a task should be created. When an event happens, AireFlow will create an instance of every task that is defined with a relevant trigger. A trigger is relevant if it matches the type and key of the event. There are two main types of event that can trigger tasks to be created, custom events and task events.</p><h2 id="custom-events" tabindex="-1">Custom Events <a class="header-anchor" href="#custom-events" aria-label="Permalink to &quot;Custom Events&quot;">​</a></h2><p>A custom event is an event published via the api, with an associated routing key.</p><h3 id="event-definitions" tabindex="-1">Event Definitions <a class="header-anchor" href="#event-definitions" aria-label="Permalink to &quot;Event Definitions&quot;">​</a></h3><p>To trigger a task based on a custom event, define your event with a name and routing key via the Event Definitions page. Note that once a key is set it cannot be changed, so you will need to create a new event definition and re-add it to any triggers if your key needs to be changed.</p><p>The event definitions page can also be used to test workflows by manually firing events that would otherwise come from outside AireFlow.</p><h3 id="publishing-custom-events" tabindex="-1">Publishing Custom Events <a class="header-anchor" href="#publishing-custom-events" aria-label="Permalink to &quot;Publishing Custom Events&quot;">​</a></h3><p>Custom events are published via an HTTP POST request to <code>https://{Your AireFlow Host}/Api/Event/{routingKey}/{subjectId}</code>. The routing key is required, as it uniquely identifies the event and is the part of the event that a trigger has a reference to. The subject ID in the URL is optional, because it can also be specified in your workflow definition.</p><h3 id="aireforms-integration" tabindex="-1">AireForms Integration <a class="header-anchor" href="#aireforms-integration" aria-label="Permalink to &quot;AireForms Integration&quot;">​</a></h3><p>Custom event triggers can be used as a way of directing the output of AireForms into a Workflow. The AireFlow plugin is built into AireForms, so as long as it&#39;s enabled for the environment you&#39;re using, collecting the output of a form can be accomplished simply by using the correct routing key. The associated task will be triggered with the form XML as its context. When a AireForms form is submitted, the routing key is set by convention as <code>{FORM_KEY}-{VERSION}</code>. For example, if you had version <code>3</code> of a form with key <code>about-me</code>, then the routing key you should use in the Event Definition is <code>about-me-3</code>. This custom event can then be added to a workflow definition as a trigger.</p><p>In AireForms, if the form is a single pass form then the AireFlow delivery channel should be used. Whereas, if it’s a clinician form it can use the built in AireFlow plugin. Both methods rely on some configuration in the environment variables. For more information about this, please take a look at the <a href="https://docs.forms.aireinnovate.com/" target="_blank" rel="noreferrer">AireForms documentation</a>.</p><h2 id="task-events" tabindex="-1">Task Events <a class="header-anchor" href="#task-events" aria-label="Permalink to &quot;Task Events&quot;">​</a></h2><p>Task events are created by AireFlow itself, whenever task instances are created or updated. There are several specific types of task event.</p><table><thead><tr><th style="text-align:left;">Event</th><th style="text-align:left;">When does it happen?</th></tr></thead><tbody><tr><td style="text-align:left;">Task Instantiated</td><td style="text-align:left;">Every time a task is created.</td></tr><tr><td style="text-align:left;">Task Assigned</td><td style="text-align:left;">Every time the assignee of a task is changed.</td></tr><tr><td style="text-align:left;">Task Started</td><td style="text-align:left;">Whenever the status of a task is changed to <code>In Progress</code>. If the Task is moved from <code>New</code> directly to <code>Completed</code>, this event will not happen.</td></tr><tr><td style="text-align:left;">Task Completed</td><td style="text-align:left;">When the status of a task is changed to <code>Completed</code>. This event occurs automatically for notification tasks, after the notification is sent.</td></tr><tr><td style="text-align:left;">Task Failed</td><td style="text-align:left;">When the status of a task is changed to <code>Failed</code>. This event also occurs automatically for notification tasks, when a notification fails to be sent and all retry attempts have also failed.</td></tr><tr><td style="text-align:left;">Task Cancelled</td><td style="text-align:left;">Whenever the status of a task is changed to <code>Cancelled</code>.</td></tr><tr><td style="text-align:left;">Task Blocked</td><td style="text-align:left;">When the status of a task is changed to <code>Blocked</code>.</td></tr></tbody></table>',15),o=[n];function r(d,l,h,c,f,u){return a(),t("div",null,o)}const v=e(s,[["render",r]]);export{m as __pageData,v as default};
